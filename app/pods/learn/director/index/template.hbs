<p>In theater, the director is responsible for translating a script into something the audience can appreciate: props and staging, lighting, music, character movement and dialogue. The same is true in Ember Theater. You (the game designer) write a script, and the Director is responsible for translating that script into an actual game. First, however, you must opt into using her:</p>

{{code-snippet name="learn--director--config.js"}}

<p>You can configure a great deal about your game by setting the Director's config, but as an absolute minimum, you need to do two things. First, you need to tell the Producer to include her with: <code class="inline-code">producer: { components: ['ember-theater/director'] }</code>. Secondly, you need to provide an initial scene with <code class="inline-code">director: { initialScene: 'scene-id' }</code>. Whenever a player starts a game for the first time (or restarts a game they've been playing), the Director will refer back to this <code class="inline-code">initialScene</code> to figure out where to start. After that, she'll be able to navigate from scene to scene with the {{#link-to "learn.director.scene"}}<code class="inline-code">transitionToScene</code>{{/link-to}} direction.</p>

<h2>Scenes</h2>

<p>The Director's job is to keep track of which scene is currently under way, and then to direct the provided <code class="inline-code">script</code>. You can generate new scenes by typing <code class="inline-code">ember g ember-theater-scene [scene-name]</code> in the command line. Scenes are kept in the folder <code class="inline-code">app/ember-theater/director/scripts</code>:</p>

{{code-snippet name="learn--director--scene.js"}}

<p>In the <code class="inline-code">script</code> above, we see a series of <code class="inline-code">directions</code>, such as <code class="inline-code">sound</code>, <code class="inline-code">backdrop</code>, and <code class="inline-code">character</code>. Each of these <code class="inline-code">directions</code> will affect what's happening on stage, whether it's the beach scene fading in or the music starting up.</p>

<p>You might notice that some of these <code class="inline-code">directions</code> take a single argument (such as <code class="inline-code">this.backdrop('beach');</code>), while others have two or even three (<code class="inline-code">this.character('blixie', { translateX: '70vw' }, { duration: 500 });</code>). In the following sections, we'll go into greater detail about how each of these <code class="inline-code">directions</code> works and what information it expects or can use.</p>

<h2>Config</h2>

<p>There are generally three ways to customize a direction. They include passing arguments directly into the direction, setting attributes on an associated fixture, and finally by changing <code class="inline-code">app/ember-theater/config.js</code>. They are prioritized in this order:</p>

<ul>
  <li>
    Options
  </li>
  <li>
    Fixtures
  </li>
  <li>
    Config
  </li>
</ul>

<p>So in this example:</p>

{{code-snippet name="learn--director--priority.js"}}

<p><code class="inline-code">transitionIn: duration</code> will be set by the options passed to the direction, even though both the fixture and config have declared a value for it. In turn, the <code class="inline-code">decorativeClassNames</code> will be set by the fixture, event though the config has declared a value for it. Finally, <code class="inline-code">transitionIn: effect</code> will be set by <code class="inline-code">config.text</code>, even though <code class="inline-code">config.globals</code> has also declared a value.</p>

<p>You'll find more details in the individual direction sections on what values can be set in their fixtures/configs.</p>
